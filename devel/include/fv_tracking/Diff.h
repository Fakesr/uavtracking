// Generated by gencpp from file fv_tracking/Diff.msg
// DO NOT EDIT!


#ifndef FV_TRACKING_MESSAGE_DIFF_H
#define FV_TRACKING_MESSAGE_DIFF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fv_tracking
{
template <class ContainerAllocator>
struct Diff_
{
  typedef Diff_<ContainerAllocator> Type;

  Diff_()
    : x(0.0)
    , y(0.0)
    , velx(0.0)
    , vely(0.0)
    , Ix(0.0)
    , Iy(0.0)
    , recsize(0.0)
    , selectrec(0.0)  {
    }
  Diff_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , velx(0.0)
    , vely(0.0)
    , Ix(0.0)
    , Iy(0.0)
    , recsize(0.0)
    , selectrec(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _velx_type;
  _velx_type velx;

   typedef double _vely_type;
  _vely_type vely;

   typedef double _Ix_type;
  _Ix_type Ix;

   typedef double _Iy_type;
  _Iy_type Iy;

   typedef double _recsize_type;
  _recsize_type recsize;

   typedef double _selectrec_type;
  _selectrec_type selectrec;





  typedef boost::shared_ptr< ::fv_tracking::Diff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fv_tracking::Diff_<ContainerAllocator> const> ConstPtr;

}; // struct Diff_

typedef ::fv_tracking::Diff_<std::allocator<void> > Diff;

typedef boost::shared_ptr< ::fv_tracking::Diff > DiffPtr;
typedef boost::shared_ptr< ::fv_tracking::Diff const> DiffConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fv_tracking::Diff_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fv_tracking::Diff_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fv_tracking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'fv_tracking': ['/home/dov1s/catkin_ws/src/fv_tracking/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fv_tracking::Diff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fv_tracking::Diff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fv_tracking::Diff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fv_tracking::Diff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fv_tracking::Diff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fv_tracking::Diff_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fv_tracking::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "555a2165453dfd975e2db54640de2933";
  }

  static const char* value(const ::fv_tracking::Diff_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x555a2165453dfd97ULL;
  static const uint64_t static_value2 = 0x5e2db54640de2933ULL;
};

template<class ContainerAllocator>
struct DataType< ::fv_tracking::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fv_tracking/Diff";
  }

  static const char* value(const ::fv_tracking::Diff_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fv_tracking::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x  #pix\n\
float64 y\n\
float64 velx\n\
float64 vely\n\
float64 Ix\n\
float64 Iy\n\
float64 recsize	#框选近大远小\n\
float64 selectrec	#框选大小\n\
";
  }

  static const char* value(const ::fv_tracking::Diff_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fv_tracking::Diff_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.velx);
      stream.next(m.vely);
      stream.next(m.Ix);
      stream.next(m.Iy);
      stream.next(m.recsize);
      stream.next(m.selectrec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diff_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fv_tracking::Diff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fv_tracking::Diff_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "velx: ";
    Printer<double>::stream(s, indent + "  ", v.velx);
    s << indent << "vely: ";
    Printer<double>::stream(s, indent + "  ", v.vely);
    s << indent << "Ix: ";
    Printer<double>::stream(s, indent + "  ", v.Ix);
    s << indent << "Iy: ";
    Printer<double>::stream(s, indent + "  ", v.Iy);
    s << indent << "recsize: ";
    Printer<double>::stream(s, indent + "  ", v.recsize);
    s << indent << "selectrec: ";
    Printer<double>::stream(s, indent + "  ", v.selectrec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FV_TRACKING_MESSAGE_DIFF_H
